/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ubt.healthcare.ui.admin;

import com.ubt.healthcare.business.CityService;
import com.ubt.healthcare.business.DoctorService;
import com.ubt.healthcare.dto.City;
import com.ubt.healthcare.dto.Doctor;
import com.ubt.healthcare.ui.admin.model.DoctorComboBoxModelCity;
import com.ubt.healthcare.ui.admin.model.DoctorTableModelViewDoctor;
import java.awt.event.MouseAdapter;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author F
 */
public class JIFSearchDoctor extends javax.swing.JInternalFrame {

    private Doctor doctor;
    private DoctorService doctorService;
    private CityService cityService;
    private DoctorTableModelViewDoctor doctorTableModelViewDoctor;
    private DoctorComboBoxModelCity doctorComboboxCity;
    private List<Doctor> doctorList;
    /**
     * Creates new form JIFDoctor
     */
    public JIFSearchDoctor() {

        cityService = new CityService();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlSelect = new javax.swing.JLabel();
        jcpDoctor = new javax.swing.JScrollPane();
        jtDoctorTable = new javax.swing.JTable();
        jlSearchByName = new javax.swing.JLabel();
        jtfSearchByName = new javax.swing.JTextField();
        jlSearchBySurName = new javax.swing.JLabel();
        jtfSearchBySurName = new javax.swing.JTextField();
        jlSearchByCity = new javax.swing.JLabel();
        jcbSearchByCity = new javax.swing.JComboBox();
        jbSearchDoctor = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Find Doctor Screen");
        setToolTipText("");
        setName(""); // NOI18N
        setVisible(true);

        jlSelect.setText("Select");

        jtDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jcpDoctor.setViewportView(jtDoctorTable);

        jlSearchByName.setText("Name");

        jlSearchBySurName.setText("Surname");

        jlSearchByCity.setText("City");

        jcbSearchByCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbSearchDoctor.setText("Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jcpDoctor)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlSearchByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtfSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 97, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlSearchBySurName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(122, 122, 122))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtfSearchBySurName, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlSearchByCity, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                .addGap(185, 185, 185))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcbSearchByCity, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jbSearchDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(474, 474, 474))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSearchByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlSearchBySurName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlSearchByCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jtfSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbSearchDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbSearchByCity)
                        .addComponent(jtfSearchBySurName)))
                .addGap(39, 39, 39)
                .addComponent(jcpDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jlSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbSearchDoctor;
    private javax.swing.JComboBox jcbSearchByCity;
    private javax.swing.JScrollPane jcpDoctor;
    private javax.swing.JLabel jlSearchByCity;
    private javax.swing.JLabel jlSearchByName;
    private javax.swing.JLabel jlSearchBySurName;
    private javax.swing.JLabel jlSelect;
    private javax.swing.JTable jtDoctorTable;
    private javax.swing.JTextField jtfSearchByName;
    private javax.swing.JTextField jtfSearchBySurName;
    // End of variables declaration//GEN-END:variables
 
     public void addSelectDoctorPanelMouseAdapter(MouseAdapter e) {
        jlSelect.addMouseListener(e);
    }
    
    public void addSearchDoctorPanelMouseAdapter(MouseAdapter e) {
        jbSearchDoctor.addMouseListener(e);
    }

    public void setDoctor(Doctor doctor) {
        this.doctor = doctor;
    }

    public void setDoctorService(DoctorService doctorService) {
        this.doctorService = doctorService;
    }
    public void setCityService(CityService cityService) {
        this.cityService = cityService;
    }

    public JComboBox<String> getJcbSearchByCity() {
        return jcbSearchByCity;
    }

    public JTextField getJtfSearchByName() {
        return jtfSearchByName;
    }

    public JTextField getJtfSearchBySurName() {
        return jtfSearchBySurName;
    }
    
    public void loadDoctorListTable(String name, String surname, String city)
    {  
        doctorList = doctorService.findDoctorsByParameters(name,surname, city);                                 
        doctorTableModelViewDoctor = new DoctorTableModelViewDoctor(doctorList);
        jtDoctorTable.setModel(doctorTableModelViewDoctor);
        doctorTableModelViewDoctor.fireTableDataChanged();
    }
    
    public void loadCityComboBox()
    {
        List<City> city = cityService.findAllCity();
        doctorComboboxCity = new DoctorComboBoxModelCity(city);
        jcbSearchByCity.setModel(doctorComboboxCity);
        jcbSearchByCity.repaint();
    } 

    public DoctorTableModelViewDoctor getDoctorTableModelViewDoctor() {
        return doctorTableModelViewDoctor;
    }

    public JTable getJtDoctorTable() {
        return jtDoctorTable;
    }
     
       // method which searches for Doctor 
    public void searchDoctorInternalPane()
    {
        String nameOfDctor = jtfSearchByName.getText();
        String surnameOfDctor = jtfSearchBySurName.getText();
        String cityOfDoctor = jcbSearchByCity.getSelectedIndex()<0? "":jcbSearchByCity.getSelectedItem().toString();
        
        if(nameOfDctor.trim().length() == 0 && surnameOfDctor.trim().length() == 0 && cityOfDoctor.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(rootPane, "Please fill the fields to find the Doctor you are looking for");
        }
        else
        {   

            loadDoctorListTable(nameOfDctor,surnameOfDctor,cityOfDoctor);
           

        }
    }
    
      static
    {
        try 
         {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) 
            {
                if ("Nimbus".equals(info.getName())) 
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    
                    /*jdpPaneHandler.setUI(new DesktopPaneUI() {
                        @Override
                        public void installUI(JComponent ui) {
                            try {
                                UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel.");

                            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
                            }
                        }
                    });*/
                    break;
                }
            }
        } catch (ClassNotFoundException  |InstantiationException | IllegalAccessException  | UnsupportedLookAndFeelException ex) 
        {
            System.out.println("UI Manager not found");
        }
    }
}
